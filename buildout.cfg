[buildout]
extends = versions.cfg
find-links =
    https://github.com/datakurre/eye/tarball/master/eye-1.0.1dev.tar.gz
parts =
# Utils
    env
    activate
# App and ZEO
    pyramid
    zeo.conf
    postbuild
# Supervisors
    supervisor
    matti
    asko
# Misc
    checkversions
    test
    coverage
    test-coverage
    flake8
    analyze-flake8
    analyze
    eye
    python
# Docs
#   numpy
#   docs-python
eggs =
    Paste
    waitress
    working-memory-games
    pyramid-debugtoolbar
develop = .
versions = versions
newest = true
show-picked-versions = true
allow-picked-versions = false

[env]
recipe = gocept.recipe.env

[activate]
recipe = evg.recipe.activate

[pyramid]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
scripts = pserve runzeo zeopack
dependent-scripts = true

[analyze]
recipe = collective.recipe.template
input = inline:
    from ZODB.scripts.analyze import report, analyze
    report(analyze("${buildout:directory}/var/filestorage/Data.fs"))
output = ${buildout:parts-directory}/analyze.py

[eye]
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    eye

[zeo.conf]
recipe = collective.recipe.template
input = inline:
    <zeo>
        address ${buildout:directory}/var/zeo.sock
        pid-filename ${buildout:directory}/var/zeo.pid
        read-only false
        invalidation-queue-size 100
    </zeo>
    <blobstorage 1>
        <filestorage>
            path ${buildout:directory}/var/filestorage/Data.fs
        </filestorage>
        blob-dir ${buildout:directory}/var/blobstorage
    </blobstorage>
output = ${buildout:parts-directory}/zeo.conf

[postbuild]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    mkdir -p ${buildout:directory}/var/filestorage
    mkdir -p ${buildout:directory}/var/blobstorage

[reset]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    rm -rf ${buildout:directory}/var/filestorage/*
    rm -rf ${buildout:directory}/var/blobstorage/*

[supervisor]
recipe = collective.recipe.supervisor
port = 9001
user = admin
password = admin
nocleanup = true
programs =
    10 zeo ${buildout:bin-directory}/runzeo [-C ${zeo.conf:output}] true ${env:USER}
    20 pyramid (autostart=false) ${buildout:bin-directory}/pserve [${buildout:directory}/production.ini] true ${env:USER}

[asko]
recipe = collective.recipe.supervisor
port = 9002
user = admin
password = admin
nocleanup = true
programs =
    10 zeo ${buildout:bin-directory}/runzeo [-C ${zeo.conf:output}] true ${env:USER}
    20 pyramid ${buildout:bin-directory}/pserve [${buildout:directory}/asko.ini] true ${env:USER}

[matti]
recipe = collective.recipe.supervisor
port = 9003
user = admin
password = admin
nocleanup = true
programs =
    10 zeo ${buildout:bin-directory}/runzeo [-C ${zeo.conf:output}] true ${env:USER}
    20 pyramid ${buildout:bin-directory}/pserve [${buildout:directory}/matti.ini] true ${env:USER}

[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions[buildout]

[test]
recipe = collective.xmltestreport
eggs = working_memory_games [test]
defaults = ['--auto-color', '--auto-progress', '--xml']

[coverage]
recipe = zc.recipe.egg
eggs = coverage

[test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    bin/coverage erase
    bin/coverage run -p --source=src/working_memory_games bin/test $@
    bin/coverage combine
    bin/coverage xml -i -o ${buildout:directory}/parts/test/coverage.xml
output = ${buildout:directory}/bin/test-coverage
mode = 755

[flake8]
recipe = zc.recipe.egg
eggs = flake8
entry-points = flake8=flake8.run:main

[analyze-flake8]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    rm -f ${buildout:parts-directory}/flake8.log.tmp
    $(find -L ${buildout:directory}/src -regex ".*\.py" | xargs -r bin/flake8 >> ${buildout:parts-directory}/flake8.log.tmp)
    $(cat ${buildout:parts-directory}/flake8.log.tmp|sed "s:${buildout:directory}/::" > ${buildout:parts-directory}/flake8.log)
output = ${buildout:directory}/bin/analyze-flake8
mode = 755

[python]
recipe = zc.recipe.egg
eggs = ${pyramid:eggs}
interpreter = python

# Must be executed before tuloksetpy for scipy
[numpy]
recipe = collective.recipe.cmd
cmds =
  tmpdir=`mktemp -d /tmp/numpy.working_memory_games`
  cd $tmpdir
  curl -O http://downloads.sourceforge.net/project/numpy/NumPy/1.6.2/numpy-1.6.2.zip -L
  unzip -x numpy-1.6.2.zip
  ${buildout:directory}/bin/buildout setup numpy-1.6.2 install
on_install = true
on_update = true

# Requires https://gcc.gnu.org/wiki/GFortranBinaries
# (In theory, gfortan could be build in buildout and scipy build using
# zc.recipe.egg:custom, but maybe later...)
[docs-python]
recipe = zc.recipe.egg
eggs =
    ${pyramid:eggs}
    numpy
    scipy
    matplotlib
    dot2tex
interpreter = python
scripts =
    python
    dot2tex
extra-paths =
    ${buildout:directory}/docs/gradu-deadline-2014-06/tulokset
# Create python-interpreter with docs dependencies with
# bin/buildout "buildout:parts+=numpy docs-python"
